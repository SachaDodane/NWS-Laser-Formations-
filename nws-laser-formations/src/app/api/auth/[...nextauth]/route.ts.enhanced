import NextAuth, { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import GitHubProvider from "next-auth/providers/github";
import { connectToDB } from "@/lib/database";
import User from "@/models/User";
import { PasswordService } from "@/lib/security/encryption";

export const authOptions: NextAuthOptions = {
  providers: [
    GitHubProvider({
      clientId: process.env.GITHUB_ID || "",
      clientSecret: process.env.GITHUB_SECRET || "",
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_ID || "",
      clientSecret: process.env.GOOGLE_SECRET || "",
    }),
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Informations d'identification manquantes");
        }

        await connectToDB();

        // Rechercher l'utilisateur par email
        const user = await User.findOne({ email: credentials.email.toLowerCase() });

        if (!user) {
          throw new Error("Email ou mot de passe incorrect");
        }

        // Vérifier le verrouillage du compte
        if (user.loginAttempts >= 5 && user.lockUntil && user.lockUntil > Date.now()) {
          throw new Error(`Compte verrouillé. Veuillez réessayer après ${new Date(user.lockUntil).toLocaleString()}`);
        }

        // Vérifier le mot de passe
        const isPasswordValid = await PasswordService.verifyPassword(
          credentials.password,
          user.password
        );

        if (!isPasswordValid) {
          // Incrémenter les tentatives de connexion ratées
          await User.findByIdAndUpdate(user._id, {
            $inc: { loginAttempts: 1 },
            $set: {
              lockUntil: user.loginAttempts >= 4 ? Date.now() + 15 * 60 * 1000 : null // Verrouillage de 15 minutes après 5 échecs
            }
          });
          
          throw new Error("Email ou mot de passe incorrect");
        }

        // Réinitialiser les tentatives de connexion si réussite
        await User.findByIdAndUpdate(user._id, {
          $set: { loginAttempts: 0, lockUntil: null, lastLogin: new Date() }
        });

        return {
          id: user._id.toString(),
          name: user.name,
          email: user.email,
          role: user.role || "user",
          image: user.image,
        };
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user, account }) {
      if (user) {
        token.id = user.id;
        token.role = user.role;
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id as string;
        session.user.role = token.role as string;
      }
      return session;
    },
  },
  pages: {
    signIn: '/auth/signin',
    error: '/auth/error',
  },
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 jours
  },
  jwt: {
    maxAge: 30 * 24 * 60 * 60, // 30 jours
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV === "development",
  cookies: {
    sessionToken: {
      name: `__Secure-next-auth.session-token`,
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
      },
    },
  },
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
