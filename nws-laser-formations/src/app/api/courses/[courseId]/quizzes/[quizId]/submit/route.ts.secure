import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { connectToDB } from "@/lib/database";
import Course from "@/models/Course";
import Progress from "@/models/Progress";
import Quiz from "@/models/Quiz";
import { validateApiRequest, validateMongoId, sanitizeInput } from "@/lib/security/apiValidation";
import { EncryptionService } from "@/lib/security/encryption";

// Instance de service de chiffrement
const encryptionService = new EncryptionService();

export async function POST(
  request: NextRequest,
  { params }: { params: { courseId: string; quizId: string } }
) {
  try {
    // Validation de l'API, vérification d'authentification et limitation de taux
    const validationResult = await validateApiRequest(request, ['user']);
    if (validationResult) {
      return validationResult;
    }

    // Validation des identifiants MongoDB
    if (!validateMongoId(params.courseId) || !validateMongoId(params.quizId)) {
      return NextResponse.json(
        { 
          success: false, 
          message: "Format d'identifiant invalide" 
        }, 
        { status: 400 }
      );
    }

    // Récupérer la session
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { 
          success: false, 
          message: "Accès non autorisé" 
        }, 
        { status: 401 }
      );
    }

    // Récupérer les données de la requête
    const data = await request.json();
    const { answers, totalTime } = data;

    // Validation des données
    if (!answers || !Array.isArray(answers)) {
      return NextResponse.json(
        { 
          success: false, 
          message: "Réponses manquantes ou format invalide" 
        }, 
        { status: 400 }
      );
    }

    // Connexion à la base de données
    await connectToDB();

    // Récupérer le cours
    const course = await Course.findById(params.courseId)
      .populate("chapters")
      .populate("quizzes");

    if (!course) {
      return NextResponse.json(
        { 
          success: false, 
          message: "Cours non trouvé" 
        }, 
        { status: 404 }
      );
    }

    // Récupérer le quiz
    const quiz = await Quiz.findById(params.quizId);
    if (!quiz) {
      return NextResponse.json(
        { 
          success: false, 
          message: "Quiz non trouvé" 
        }, 
        { status: 404 }
      );
    }

    // Vérifier les réponses et calculer le score
    const questions = quiz.questions;
    let correctAnswers = 0;

    for (let i = 0; i < questions.length; i++) {
      const question = questions[i];
      const userAnswer = answers.find((a: any) => a.questionId === question._id.toString());
      
      if (userAnswer && userAnswer.selectedOption === question.correctAnswer) {
        correctAnswers += 1;
      }
    }

    const score = questions.length > 0 
      ? Math.round((correctAnswers / questions.length) * 100) 
      : 0;
    
    const passed = score >= quiz.passScore;

    // Obtenir la progression actuelle de l'utilisateur
    let userProgress = await Progress.findOne({
      userId: session.user.id,
      courseId: params.courseId,
    });

    if (!userProgress) {
      userProgress = await Progress.create({
        userId: session.user.id,
        courseId: params.courseId,
        completedChapters: [],
        quizResults: [],
        overallProgress: 0,
        certificates: [],
      });
    }

    // Mettre à jour les résultats du quiz
    const existingQuizResultIndex = userProgress.quizResults.findIndex(
      (result: any) => result.quizId.toString() === params.quizId
    );

    const quizResult = {
      quizId: params.quizId,
      score,
      passed,
      completedAt: new Date(),
      timeSpent: totalTime || 0,
      attemptNumber: existingQuizResultIndex !== -1 
        ? userProgress.quizResults[existingQuizResultIndex].attemptNumber + 1 
        : 1,
    };

    if (existingQuizResultIndex !== -1) {
      userProgress.quizResults[existingQuizResultIndex] = quizResult;
    } else {
      userProgress.quizResults.push(quizResult);
    }

    // Calculer la progression globale
    const totalItems = course.chapters.length + course.quizzes.length;
    const completedChapters = userProgress.completedChapters.length;
    const completedQuizzes = userProgress.quizResults.filter((result: any) => result.passed).length;
    
    userProgress.overallProgress = totalItems > 0
      ? Math.round(((completedChapters + completedQuizzes) / totalItems) * 100)
      : 0;

    // Vérifier si le cours est terminé
    let certificateGenerated = false;
    const isLastQuiz = quiz._id.toString() === course.quizzes[course.quizzes.length - 1]._id.toString();
    
    if (passed && isLastQuiz && userProgress.overallProgress >= 80) {
      // Vérifier si un certificat existe déjà
      const existingCertificate = userProgress.certificates.find(
        (cert: any) => cert.courseId.toString() === params.courseId
      );
      
      if (!existingCertificate) {
        // Générer le certificat
        const certificateId = new mongoose.Types.ObjectId();
        
        // Chiffrer les données sensibles avec notre service de chiffrement
        const encryptedUserId = encryptionService.encrypt(session.user.id);
        
        userProgress.certificates.push({
          _id: certificateId,
          courseId: params.courseId,
          userId: session.user.id,
          encryptedData: encryptedUserId,
          issuedAt: new Date(),
          // Générer une URL unique pour le certificat
          url: `/api/certificate/generate?courseId=${params.courseId}&userId=${session.user.id}&certId=${certificateId}`,
        });
        
        certificateGenerated = true;
      }
    }

    // Enregistrer les modifications
    await userProgress.save();

    return NextResponse.json({
      success: true,
      score,
      passed,
      certificateGenerated,
      overallProgress: userProgress.overallProgress,
    });
  } catch (error) {
    console.error("Erreur lors de la soumission du quiz:", error);
    return NextResponse.json(
      { 
        success: false, 
        message: "Une erreur s'est produite lors de la soumission du quiz" 
      }, 
      { status: 500 }
    );
  }
}
